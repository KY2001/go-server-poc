// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RWTXPbNhD9K5htj5SofMw0w1ubNInbmYyndqYHVweIWIlwSABeLNwoHv73zoKKZFmU",
	"myZxJ7nYkgC8fdz39oE3UPsueIeOI1Q3EOsGO50//krk6Q+MwbuI8kMgH5DYYl7uMEa9ygsGY002sPUO",
	"KnidOu0mhNroRYsKBUZtdk+hAF4HhAoik3Ur6AuIrDnF596MgZ2fn6phg6q9yQD4XnehRaiezh5t4axj",
	"XCEJHltuR6DOGk+8oSNQypOyBh3bpUXaA4a3TiduPNkPaA4p9wUQXiVLaKC6uM2/2LZlvj3lF5dYsxB7",
	"hfwadcvNz4mb450d8A4fQE5terHP1r/7RI73s/rvjM6QrpGUdka9+OVhqJ1at/psYg/C6G3Ee8YiRaQ3",
	"ussru6K/29hYo9Ubv0j+X+tvMQ4ZyLhgncjy+kxGdSi6QE1I4o/dt5eeOs1QwW9/nkMxDLYgDas7Dg1z",
	"gF6ArVt6Ob+ZH/ABnQ5WMXah1SzuvkaKQ4cfTWfTmXRkswsqeDKdTZ9AAUFzk2mV8meFfKjP8wbrd4ob",
	"VPpa21YvbGt5rfxSxazc9C8HGZq0nDgxUH00A0ivhu7nIo9nM/lXe8focikdQmvrfLC8jFLvY67Jpx8J",
	"l1DBD+Uu+MpN6pV3/Zbbss88prpGNJAXljq1/NWq7wfuSO3k8H3AmtEMMSZ7+gJKyaoy2pVLIRvSx7GW",
	"E2pG5fBvJf4a6/CpjywmOhugREnSHTJShOriBqzgXCWkNRTgssl3Xr1tYaaExa2nHon8dbbY0lMHfXGX",
	"q4yYOnmhVuiEHxq1WKuXlnChIyodVbJGpvoYoRPzJXTmBw57etjOb8wHu1jISt0OhIt5P882aXLKf/ZM",
	"5pg3mrWIcGRAh4vkgUf0zm31nQzp0P08q0clOMfIowost97fvJZk6veKkMX/P4TYe5n59sX4lEmRDClv",
	"hiTpj6r1CjlHqZKLUy7b45JIoB3JU7ktvyS9RuLqq4q897rzPcxaVlgCa2jy/onW17pV6K4tedcJwwIS",
	"tZv3oKos84bGR66ezZ7NRu6mQN6kWr4chYlVWa78ZGAxCb6ePCb9k7m8/MBXE+2mekrJTXUI0M/7fwIA",
	"AP//6Dtv64INAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
