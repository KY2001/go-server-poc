// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RUzW7bPBB8FWK/76hKSttDoFub/qQ9BY2LHlIfaGptMZFIdrkykgZ692IpOa4TJyiC",
	"BGgvNmXNzo6Hu3MNxnfBO3QcobqGaBrsdDq+J/Ikh0A+ILHF9HOHMeoVyrHGaMgGtt5BBcd9p90LQl3r",
	"RYsKpVxN6Bwy4KuAUEFksm4FQwaRNffxyNf7yGazEzUClPF1IsBL3YUWoXpdHtzQWce4QhI+ttzuoTpt",
	"PPEkR6iUJ2VrdGyXFmmHGL463XPjyf7E+q7kIQPCH70lrKE6+11/dmPL/KbKL87RsAj7iHyMuuXmC8bg",
	"XcS7ro5ce8QjrZGUdrV693YyZFeyv/hDofdJO7Fu9WhhT69otTHrTf8Yw6TqyVXJsKLpyfLVqSzIKGGB",
	"mpCk4fbpg6dOM1Tw+dsMsnGdhGl8u1XQMAcYhNi6pZf6aXrBB3Q6WMXYhVazzNYaKY7/7iAv81JcmlBQ",
	"wav8IC8hg6C5SbIK+Vgh3/XmqEFzobhBpdfatnphW8tXyi9VTLeZf3eQqElLxacaqs2AgDg13kVq8rIs",
	"5ct4x+hSKx1Ca00qLM6j9NukiZz+J1xCBf8V27gppqwpbs9gsmVXeeyNQawhvVjqvuUn6z7G3J6evcPL",
	"gIaxHsNDMEMGRZOm89Emp12uNeuFjniP4+MCPLPntyLpn3C90P0D1s8w8l7nl5ZQ7FabdE+SHzQ/rfUz",
	"XsD+mPt7L2GbgFCd7Wbf2XyYDyNCBjwmwC5h641uFbq1Je86EZ5BT+0UhFVRJEDjI1eH5aEk3G2GQL7u",
	"jTw8RLNF5cZ3MMyHXwEAAP//FqdZtuEIAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
